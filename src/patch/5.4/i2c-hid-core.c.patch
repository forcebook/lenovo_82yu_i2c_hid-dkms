37a38,39
> #include <linux/kthread.h>
> #include <linux/gpio/driver.h>
58a61,80
> /* polling mode */
> #define I2C_HID_POLLING_DISABLED 0
> #define I2C_HID_POLLING_GPIO_PIN 1
> #define I2C_HID_POLLING_INTERVAL_ACTIVE_US 4000
> #define I2C_HID_POLLING_INTERVAL_IDLE_MS 10
> 
> static u8 polling_mode = 1;
> module_param(polling_mode, byte, 0444);
> MODULE_PARM_DESC(polling_mode, "How to poll (default=0) - 0 disabled; 1 based on GPIO pin's status");
> 
> static unsigned int polling_interval_active_us __read_mostly = I2C_HID_POLLING_INTERVAL_ACTIVE_US;
> module_param(polling_interval_active_us, uint, 0644);
> MODULE_PARM_DESC(polling_interval_active_us,
> 		 "Poll every {polling_interval_active_us} us when the touchpad is active (default=" __stringify(I2C_HID_POLLING_INTERVAL_ACTIVE_US) " us)");
> 
> static unsigned int polling_interval_idle_ms __read_mostly = I2C_HID_POLLING_INTERVAL_IDLE_MS;
> module_param(polling_interval_idle_ms, uint, 0644);
> MODULE_PARM_DESC(polling_interval_idle_ms,
> 		 "Poll every {polling_interval_idle_ms} ms when the touchpad is idle (default=" __stringify(I2C_HID_POLLING_INTERVAL_IDLE_MS) "ms)");
> 
154a177,180
> 	struct task_struct *polling_thread;
> 	unsigned long irq_trigger_type;
> 	struct irq_desc *irq_desc;
> 
819a846,935
> static int get_gpio_pin_state(struct irq_desc *irq_desc)
> {
> 	struct gpio_chip *gc = irq_data_get_irq_chip_data(&irq_desc->irq_data);
> 	int value;
> 
> 	/*
> 	 * This part of code is borrowed from gpiod_get_raw_value_commit in
> 	 * drivers/gpio/gpiolib.c. Ideally, gpiod_get_value_cansleep can be re-used
> 	 * instead but there is no API of converting (struct irq_desc *) to
> 	 * (struct gpio_desc*).
> 	 */
> 	value = gc->get ? gc->get(gc, irq_desc->irq_data.hwirq) : -EIO;
> 	value = value < 0 ? value : !!value;
> 	return value;
> }
> 
> static bool interrupt_line_active(struct i2c_hid *ihid)
> {
> 	int status = get_gpio_pin_state(ihid->irq_desc);
> 	struct i2c_client *client = ihid->client;
> 
> 	if (status < 0) {
> 		dev_dbg_ratelimited(&client->dev,
> 				    "Failed to get GPIO Interrupt line status for %s",
> 				    client->name);
> 		return false;
> 	}
> 	/*
> 	 * According to Windows Precsiontion Touchpad's specs
> 	 * https://docs.microsoft.com/en-us/windows-hardware/design/component-guidelines/windows-precision-touchpad-device-bus-connectivity,
> 	 * GPIO Interrupt Assertion Leve could be either ActiveLow or
> 	 * ActiveHigh.
> 	 */
> 	if (ihid->irq_trigger_type & IRQF_TRIGGER_LOW)
> 		return !status;
> 
> 	return status;
> }
> 
> static int i2c_hid_polling_thread(void *i2c_hid)
> {
> 	struct i2c_hid *ihid = i2c_hid;
> 	unsigned int polling_interval_idle;
> 
> 	while (!kthread_should_stop()) {
> 		while (interrupt_line_active(i2c_hid) &&
> 		       !test_bit(I2C_HID_READ_PENDING, &ihid->flags) &&
> 		       !kthread_should_stop()) {
> 			i2c_hid_get_input(ihid);
> 			usleep_range(polling_interval_active_us,
> 				     polling_interval_active_us + 100);
> 		}
> 		/*
> 		 * re-calculate polling_interval_idle
> 		 * so the module parameters polling_interval_idle_ms can be
> 		 * changed dynamically through sysfs as polling_interval_active_us
> 		 */
> 		polling_interval_idle = polling_interval_idle_ms * 1000;
> 		usleep_range(polling_interval_idle,
> 			     polling_interval_idle + 1000);
> 	}
> 
> 	return 0;
> }
> 
> static int i2c_hid_init_polling(struct i2c_hid *ihid)
> {
> 	struct i2c_client *client = ihid->client;
> 
> 	ihid->irq_trigger_type = irq_get_trigger_type(client->irq);
> 	if (!ihid->irq_trigger_type) {
> 		dev_dbg(&client->dev,
> 			"Failed to get GPIO Interrupt Assertion Level, could not enable polling mode for %s",
> 			 client->name);
> 		return -EINVAL;
> 	}
> 
> 	ihid->polling_thread = kthread_create(i2c_hid_polling_thread, ihid,
> 					      "I2C HID polling thread");
> 
> 	if (IS_ERR(ihid->polling_thread)) {
> 		dev_err(&client->dev, "Failed to create I2C HID polling thread");
> 		return PTR_ERR(ihid->polling_thread);
> 	}
> 	dev_info(&client->dev, "Polling Mode enabled for %s", client->name);
> 	ihid->irq_desc = irq_data_to_desc( irq_get_irq_data(client->irq) );
> 	wake_up_process(ihid->polling_thread);
> 	return 0;
> }
> 
913a1030,1039
> static void free_irq_or_stop_polling(struct i2c_client *client,
> 				     struct i2c_hid *ihid)
> {
> 	if (polling_mode != I2C_HID_POLLING_DISABLED)
> 		kthread_stop(ihid->polling_thread);
> 	else
> 		free_irq(client->irq, ihid);
> }
> 
> 
979c1105,1108
< 	ret = i2c_hid_init_irq(client);
---
> 	if (polling_mode != I2C_HID_POLLING_DISABLED)
> 		ret = i2c_hid_init_polling(ihid);
> 	else
> 		ret = i2c_hid_init_irq(client);
1018c1147
< 	free_irq(client->irq, ihid);
---
> 	free_irq_or_stop_polling(client, ihid);
1035c1164
< 	free_irq(client->irq, ihid);
---
> 	free_irq_or_stop_polling(client, ihid);
1051c1180
< 	free_irq(client->irq, ihid);
---
> 	free_irq_or_stop_polling(client, ihid);
1075c1204,1205
< 	disable_irq(client->irq);
---
> 	if (polling_mode == I2C_HID_POLLING_DISABLED)
> 		disable_irq(client->irq);
1077c1207
< 	if (device_may_wakeup(&client->dev)) {
---
> 	if (device_may_wakeup(&client->dev) && polling_mode == I2C_HID_POLLING_DISABLED) {
1099c1229
< 	if (!device_may_wakeup(&client->dev)) {
---
> 	if (!device_may_wakeup(&client->dev) || polling_mode != I2C_HID_POLLING_DISABLED) {
1110c1240,1241
< 	enable_irq(client->irq);
---
> 	if (polling_mode == I2C_HID_POLLING_DISABLED)
> 		enable_irq(client->irq);
